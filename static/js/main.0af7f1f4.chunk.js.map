{"version":3,"sources":["components/Form/Form.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/App.jsx","reportWebVitals.js","index.js","components/Form/Form.module.css"],"names":["Form","state","contacts","name","number","handleInputChange","evt","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","css","formRow","type","onChange","pattern","title","required","Component","Contacts","onClick","map","contact","id","Filter","App","filter","handleDeleteContacts","target","formSubmitHandler","some","toLowerCase","alert","push","uuidv4","changeFilter","localStorage","getItem","parsedContacts","JSON","parse","prevState","setItem","stringify","normalizedFilter","visibleContacts","includes","postcard","HandleSearchContactByName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0af7f1f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport css from '../Form/Form.module.css';\r\n\r\nexport default class Form extends Component {\r\n  state = {\r\n    contacts: [],\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInputChange = evt => {\r\n    const { name, value } = evt.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    this.props.onSubmit(this.state.name, this.state.number);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className={css.formRow}>\r\n          <label>\r\n            Имя\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div className={css.formRow}>\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleInputChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div className={css.formRow}>\r\n          <button type=\"submit\">Add contact</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Contacts = ({ contacts, onClick }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <li key={contacts.id}>\r\n          <p>\r\n            {contact.name}: {contact.number}\r\n          </p>\r\n          <button id={contact.id} onClick={onClick} type=\"button\">\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <>\r\n      <label>\r\n        Find contacts by name\r\n        <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\nimport Form from \"../components/Form/Form\";\nimport Contacts from \"../components/Contacts/Contacts\";\nimport Filter from \"../components/Filter/Filter\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport css from \"../components/Form/Form.module.css\";\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleDeleteContacts = (evt) => {\n    this.setState({\n      contacts: this.state.contacts.filter(\n        (contact) => contact.id !== evt.target.id\n      ),\n    });\n  };\n\n  formSubmitHandler = (name, number) => {\n    const { contacts } = this.state;\n    if (\n      contacts.some(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already exists in contact list`);\n      return;\n    }\n    this.state.contacts.push({ name: name, id: uuidv4(), number: number });\n    this.setState({ contacts: contacts });\n  };\n\n  changeFilter = (evt) => {\n    this.setState({ filter: evt.currentTarget.value });\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    return (\n      <>\n        <div className={css.postcard}>\n          <h1>Phonebook</h1>\n          <Form contacts={contacts} onSubmit={this.formSubmitHandler} />\n          <div className={css.formRow}>\n            <Filter value={this.filter} onChange={this.changeFilter} />\n          </div>\n          <h2>Contacts</h2>\n          <Contacts\n            filter={filter}\n            onChange={this.HandleSearchContactByName}\n            onClick={this.handleDeleteContacts}\n            contacts={contacts}\n            contacts={visibleContacts}\n          />\n        </div>\n      </>\n    );\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postcard\":\"Form_postcard__1-RQC\",\"formRow\":\"Form_formRow__2bciO\"};"],"sourceRoot":""}